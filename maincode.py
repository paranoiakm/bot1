import time
import threading
import os
from dotenv import load_dotenv
from keep_alive import keep_alive

import discord
from discord.ext import commands
from discord import app_commands
from discord.ui import View, Button, Modal, TextInput
from datetime import datetime

import aiohttp
import asyncio

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å "–∂–∏–≤–æ–π"
def loop_forever():
    while True:
        print("–Ø –∂–∏–≤–æ–π...")
        time.sleep(60)

# –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –æ—Ç–∫–ª—é—á–∞–ª—Å—è
keep_alive()

# –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
t = threading.Thread(target=loop_forever, daemon=True)
t.start()

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –î–æ–±–∞–≤—å –µ—ë –≤ .env —Ñ–∞–π–ª.")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
GUILD_ID = 1360340501152141463
APPLICATIONS_CHANNEL_ID = 1360341903765147698
LOG_CHANNEL_ID = 1360341946257899580
PING_ROLE_ID = 1360343985565995208

MODERATOR_ROLE_NAMES = [
    " Ä·¥á·¥Ñ Ä·¥ú…™·¥õ·¥á Ä", "·¥ÖÍú± ·¥ç·¥è·¥Ö ·¥è·¥°…¥·¥á Ä", " ü·¥á·¥Ä·¥Ö·¥á Ä", "·¥ÖÍú± ·¥ç·¥è·¥Ö·¥á Ä·¥Ä·¥õ·¥è Ä",
    "·¥Ö·¥á·¥ò·¥ú·¥õ è  ü·¥á·¥Ä·¥Ö·¥á Ä", "PIDORAAAAS", "üêπHamsterüêπ", " ú…™…¢ ú"
]
ROLES_TO_GIVE_IDS = [1360343840308986098, 1360343865940246629]

intents = discord.Intents.default()
intents.members = True
bot = commands.Bot(command_prefix="!", intents=intents)

# --- Self-ping –¥–ª—è Replit ---
async def self_ping():
    await bot.wait_until_ready()
    url = "https://48cb05f0-0bb7-4b86-b8b6-8fb84b9e6006-00-3ay13cljouwhu.kirk.replit.dev/"
    while not bot.is_closed():
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as resp:
                    print(f"[Self Ping] Status: {resp.status}")
        except Exception as e:
            print(f"[Self Ping] Error: {e}")
        await asyncio.sleep(240)

class OpenApplicationView(View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="–û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É", style=discord.ButtonStyle.green, custom_id="open_app")
    async def open_app(self, interaction: discord.Interaction, button: Button):
        await interaction.response.send_modal(ApplicationModal())

class ApplicationModal(Modal):
    def __init__(self):
        super().__init__(title="–§–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏")
        self.name    = TextInput(label="–ò–º—è | –°—Ç–∞—Ç–∏–∫", max_length=100)
        self.source  = TextInput(label="–ö–∞–∫ –≤—ã –Ω–∞—Å –Ω–∞—à–ª–∏?", max_length=200)
        self.ooc_age = TextInput(label="OOC –≤–æ–∑—Ä–∞—Å—Ç", max_length=3)
        self.hours   = TextInput(label="–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤?", max_length=10)
        for item in (self.name, self.source, self.ooc_age, self.hours):
            self.add_item(item)

    async def on_submit(self, interaction: discord.Interaction):
        guild = interaction.guild
        overwrites = {
            guild.default_role: discord.PermissionOverwrite(view_channel=False),
            interaction.user:   discord.PermissionOverwrite(view_channel=True, send_messages=True, read_messages=True),
        }
        for rn in MODERATOR_ROLE_NAMES:
            r = discord.utils.get(guild.roles, name=rn)
            if r:
                overwrites[r] = discord.PermissionOverwrite(
                    view_channel=True, send_messages=True,
                    read_messages=True, manage_messages=True
                )

        chan = await guild.create_text_channel(
            name=f"–∑–∞—è–≤–∫–∞-{interaction.user.name}".lower(),
            overwrites=overwrites,
            reason="–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞"
        )

        embed = discord.Embed(title="–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞", color=0x8B0000)
        embed.add_field(name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value=interaction.user.mention, inline=False)
        embed.add_field(name="–ò–º—è | –°—Ç–∞—Ç–∏–∫", value=self.name.value, inline=False)
        embed.add_field(name="–ö–∞–∫ –Ω–∞—à–ª–∏ –Ω–∞—Å?", value=self.source.value, inline=False)
        embed.add_field(name="OOC –≤–æ–∑—Ä–∞—Å—Ç", value=self.ooc_age.value, inline=False)
        embed.add_field(name="–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤?", value=self.hours.value, inline=False)

        view = ApplicationDecisionView(interaction.user, chan, embed)
        await chan.send(content=f"<@&{PING_ROLE_ID}>", embed=embed, view=view)
        await interaction.response.send_message(f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {chan.mention}", ephemeral=True)

class ApplicationDecisionView(View):
    def __init__(self, applicant: discord.Member, channel: discord.TextChannel, embed: discord.Embed):
        super().__init__(timeout=None)
        self.applicant = applicant
        self.channel = channel
        self.embed = embed

    @discord.ui.button(label="–ü—Ä–∏–Ω—è—Ç—å", style=discord.ButtonStyle.green)
    async def accept(self, interaction: discord.Interaction, button: Button):
        if not any(r.name in MODERATOR_ROLE_NAMES for r in interaction.user.roles):
            return await interaction.response.send_message("–ù–µ—Ç –ø—Ä–∞–≤!", ephemeral=True)
        for rid in ROLES_TO_GIVE_IDS:
            role = interaction.guild.get_role(rid)
            if role:
                await self.applicant.add_roles(role, reason="–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞")
        try:
            await self.applicant.send("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.")
        except discord.Forbidden:
            pass
        await interaction.response.send_message("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞", ephemeral=True)
        await self.channel.delete(reason="–ü—Ä–∏–Ω—è—Ç–æ")

    @discord.ui.button(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.danger)
    async def reject(self, interaction: discord.Interaction, button: Button):
        if not any(r.name in MODERATOR_ROLE_NAMES for r in interaction.user.roles):
            return await interaction.response.send_message("–ù–µ—Ç –ø—Ä–∞–≤!", ephemeral=True)
        await interaction.response.send_modal(RejectReasonModal(self.applicant, self.channel, self.embed))

class RejectReasonModal(Modal, title="–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"):
    reason = TextInput(label="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É", style=discord.TextStyle.paragraph)

    def __init__(self, applicant, channel, embed):
        super().__init__()
        self.applicant = applicant
        self.channel = channel
        self.embed = embed

    async def on_submit(self, interaction: discord.Interaction):
        log_channel = interaction.guild.get_channel(LOG_CHANNEL_ID)
        if log_channel:
            rej_embed = discord.Embed(
                title="–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
                description=f"–ü—Ä–∏—á–∏–Ω–∞: {self.reason.value}",
                color=0x8B0000
            )
            rej_embed.add_field(name="–û—Ç–∫–ª–æ–Ω–µ–Ω–æ", value=self.applicant.mention, inline=False)
            rej_embed.set_footer(text=f"–û—Ç–∫–ª–æ–Ω–∏–ª: {interaction.user.display_name} | {datetime.now().strftime('%d.%m.%Y %H:%M')}")
            await log_channel.send(embed=rej_embed)
        await interaction.response.send_message("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ª–æ–≥", ephemeral=True)
        await self.channel.delete(reason="–û—Ç–∫–ª–æ–Ω–µ–Ω–æ")

@bot.tree.command(guild=discord.Object(id=GUILD_ID), name="—ç–º–±–∏—Ç", description="–°–æ–∑–¥–∞—Ç—å —ç–º–±–µ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ")
@app_commands.describe(
    title="–ó–∞–≥–æ–ª–æ–≤–æ–∫",
    description="–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç",
    color="–¶–≤–µ—Ç: –∫—Ä–∞—Å–Ω—ã–π, –±–µ–ª—ã–π –∏ —Ç.–¥.",
    button_type="–¢–∏–ø –∫–Ω–æ–ø–∫–∏: link –∏–ª–∏ def",
    button_url="–°—Å—ã–ª–∫–∞, –µ—Å–ª–∏ —Ç–∏–ø link"
)
async def —ç–º–±–∏—Ç(
    interaction: discord.Interaction,
    title: str,
    description: str,
    color: str,
    button_type: str = None,
    button_url: str = None
):
    color_map = {
        "–∫—Ä–∞—Å–Ω—ã–π": 0xFF0000,
        "–±–µ–ª—ã–π": 0xFFFFFF,
        "–∑–µ–ª—ë–Ω—ã–π": 0x00FF00,
        "—Å–∏–Ω–∏–π": 0x0000FF,
        "–∂—ë–ª—Ç—ã–π": 0xFFFF00,
        "—á—ë—Ä–Ω—ã–π": 0x000000,
    }
    hex_color = color_map.get(color.lower())
    if hex_color is None:
        return await interaction.response.send_message("–ù–µ–≤–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç. –î–æ—Å—Ç—É–ø–Ω—ã–µ: –∫—Ä–∞—Å–Ω—ã–π, –±–µ–ª—ã–π, –∑–µ–ª—ë–Ω—ã–π, —Å–∏–Ω–∏–π, –∂—ë–ª—Ç—ã–π, —á—ë—Ä–Ω—ã–π", ephemeral=True)

    embed = discord.Embed(title=title, description=description, color=hex_color)
    view = None

    if button_type:
        view = View()
        if button_type == "link":
            if not button_url:
                return await interaction.response.send_message("–î–ª—è –∫–Ω–æ–ø–∫–∏ 'link' –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å URL.", ephemeral=True)
            view.add_item(Button(label="–ü–µ—Ä–µ–π—Ç–∏", style=discord.ButtonStyle.link, url=button_url))
        elif button_type == "def":
            button = Button(label="–ù–∞–∂–º–∏", style=discord.ButtonStyle.primary)

            async def callback(i: discord.Interaction):
                try:
                    await i.user.send("–ó–∞—á–µ–º –Ω–∞–∂–∞–ª?")
                    await i.response.send_message("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –õ–°", ephemeral=True)
                except discord.Forbidden:
                    await i.response.send_message("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –õ–°.", ephemeral=True)

            button.callback = callback
            view.add_item(button)

    await interaction.response.send_message(embed=embed, view=view)

@bot.event
async def on_ready():
    bot.add_view(OpenApplicationView())
    await bot.tree.sync(guild=discord.Object(id=GUILD_ID))
    print(f"–ë–æ—Ç {bot.user} –≥–æ—Ç–æ–≤ –∏ persistent view –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    bot.loop.create_task(self_ping())

bot.run(TOKEN)
